; ModuleID = 'easy.c'
source_filename = "easy.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@nk = dso_local constant [25 x i8] c"what_are_you_looking_at?\00", align 16
@__const.main.dex = private unnamed_addr constant [20 x i64] [i64 40879, i64 40880, i64 40874, i64 40885, i64 40876, i64 40874, i64 40877, i64 40896, i64 40874, i64 40883, i64 40876, i64 40874, i64 40894, i64 40883, i64 40896, i64 40874, i64 40888, i64 40827, i64 40879, i64 40779], align 16
@.str = private unnamed_addr constant [128 x i8] c"Welcome to the low level input checker! Please wrap your correct input with tecartfestival22{.*} after you got exit status (1)!\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%20s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @vmol(i8 signext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i64, align 8
  store i8 %0, i8* %2, align 1
  store i64 4531, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = shl i64 %4, 3
  %6 = load i64, i64* %3, align 8
  %7 = add i64 %5, %6
  %8 = load i8, i8* %2, align 1
  %9 = sext i8 %8 to i64
  %10 = add i64 %7, %9
  store i64 %10, i64* %3, align 8
  %11 = load i64, i64* %3, align 8
  %12 = and i64 %11, 4294967295
  ret i64 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [20 x i8], align 16
  %8 = alloca [20 x i64], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %9 = bitcast [20 x i64]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %9, i8* align 16 bitcast ([20 x i64]* @__const.main.dex to i8*), i64 160, i1 false)
  %10 = call i32 @puts(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str, i64 0, i64 0))
  %11 = getelementptr inbounds [20 x i8], [20 x i8]* %7, i64 0, i64 0
  %12 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* %11)
  store i32 0, i32* %6, align 4
  br label %13

13:                                               ; preds = %29, %2
  %14 = load i32, i32* %6, align 4
  %15 = icmp slt i32 %14, 20
  br i1 %15, label %16, label %32

16:                                               ; preds = %13
  %17 = load i32, i32* %6, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [20 x i8], [20 x i8]* %7, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = call i64 @vmol(i8 signext %20)
  %22 = load i32, i32* %6, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [20 x i64], [20 x i64]* %8, i64 0, i64 %23
  %25 = load i64, i64* %24, align 8
  %26 = icmp ne i64 %21, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %16
  call void @exit(i32 -1) #4
  unreachable

28:                                               ; preds = %16
  br label %29

29:                                               ; preds = %28
  %30 = load i32, i32* %6, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %6, align 4
  br label %13

32:                                               ; preds = %13
  ret i32 1
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @__isoc99_scanf(i8*, ...) #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Debian clang version 11.0.1-2"}
